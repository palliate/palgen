name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    name: Build (python-${{ matrix.python-version }}, ${{ matrix.os }})

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os:
          #- macos-11
          #- macos-12
          - macos-latest
          #- ubuntu-20.04
          #- ubuntu-22.04
          - ubuntu-latest
          #- windows-2019
          #- windows-2022
          - windows-latest
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements_dev.txt

      - name: Build package
        run: python -m build

      - name: Store package
        uses: actions/upload-artifact@v3
        with:
          name: palgen_${{ github.sha }}_${{ matrix.os }}_py${{ matrix.python-version }}
          path: dist/*

  test:
    name: Test (python-${{ matrix.python-version }}, ${{ matrix.os }})
    needs: build

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          #- macos-11
          #- macos-12
          - macos-latest
          #- ubuntu-20.04
          #- ubuntu-22.04
          - ubuntu-latest
          #- windows-2019
          #- windows-2022
          - windows-latest
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install tox tox-gh-actions
          pip install -r requirements.txt
          pip install -r requirements_dev.txt

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: palgen_${{ github.sha }}_${{ matrix.os }}_py${{ matrix.python-version }}
          path: dist

      - name: Install package
        run: pip install --no-index --find-links=dist palgen
        #run: pip install -e .
      
      - name: Test with pytest
        run: pytest --capture=tee-sys --continue-on-collection-errors --junit-xml ${{ matrix.os }}-py${{ matrix.python-version }}.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          #name: Test Results (Python ${{ matrix.python-version }}, ${{ matrix.os }})
          name: test
          path: ${{ matrix.os }}-py${{ matrix.python-version }}.xml

  lint:
    name: Lint
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements_dev.txt

      - name: Lint with pylint
        run: |
          pylint src --exit-zero -j 0 -f colorized --reports y
          pylint src --exit-zero -j 0 -f json --output build/lint/pylint.json

      - name: Run mypy
        run: |
          mypy src --pretty --install-types --non-interactive --junit-xml build/lint/mypy.xml
      
      - name: Upload linting results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint
          path: build/lint

  publish-test-results:
    name: Publish test results
    needs: test
    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write
      contents: read
      issues: read

    if: always()

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: test
          path: build/test

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "build/test/*.xml"

  build-docs:
    name: Build documentation
    needs: [test, lint]
    runs-on: ubuntu-latest

    if: always() && github.ref == 'refs/heads/master' && github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: build

      - name: Temporary, print downloaded artifacts
        run: |
          pwd
          ls -R .

      - name: Run palgen
        uses: palliate/palgen@master
      
      - name: Temporary, print downloaded artifacts
        run: |
          pwd
          ls -R .